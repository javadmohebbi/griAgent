package griagent

import (
	"log"

	"github.com/spf13/viper"
)

// GriConfig is a stuct that
// help use read the .json config file
type GriConfig struct {

	// Task Time
	Time string

	// Address of server should use connect
	DeployerAddress string

	// TCP port that agent should use to connect
	DeployerPort int

	// it will be defined in the server task
	// and it refer to this host
	Host string

	// host id is also generated by server task
	// and its a uniq. id for this host
	HostID string

	// Task identifier
	TaskID string

	// computer identifier
	// not used yet but maybe needed for future puposes
	ComputerID string

	// This host IP
	// not used yet but maybe needed for future puposes
	IP string

	// This host name
	// not used yet but maybe needed for future puposes
	ComputerName string

	// Command to run
	// this is the very first executable that GriAgent will
	// execute. usually somthing like installer.exe, installer.msi , ...
	Bootstrap string

	// command line options
	// an array of command line parameters that Bootstrap
	// needs. Usually /silent, /quite or maybe /unattended , ...
	// check yout installation package manual to find the unattended commandline arguments
	Params []string

	// the directory that contains package files
	Dir string
}

const (
	config_name = "griAgent"
	config_ext  = "json"
)

// read the GriAgent Config
func NewConfig(dir_path string) (*GriConfig, error) {
	var conf GriConfig

	viper.SetConfigName(config_name)
	viper.SetConfigType(config_ext)
	// viper.SetConfigType(config_ext)
	viper.AddConfigPath(dir_path)

	log.Printf("Reading config from '%s\\%s.%s'", dir_path, config_name, config_ext)
	if err := viper.ReadInConfig(); err != nil {
		// if file not found set default fallback values
		if _, ok := err.(viper.ConfigFileNotFoundError); ok {
			log.Printf("Logfile %v.%v not found in path %v", dir_path, config_name, config_ext)
			return &GriConfig{}, nil
		}
		log.Fatalln("Could not read config file due to error: ", err)
		return &GriConfig{}, err
	}

	// Unmarshal configs
	err := viper.Unmarshal(&conf)

	// check foe unmarshal errors
	if err != nil {
		log.Println("Unable to unmarshal configs into struct due to error: ", err)
		return &GriConfig{}, err
	}

	return &conf, nil

}
